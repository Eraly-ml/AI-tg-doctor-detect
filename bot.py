from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import io
import nest_asyncio
import torch
import numpy as np
import cv2
from fastai.vision.all import *
from PIL import Image

def generate_gradcam(learn, image, target_layer_name="0"):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Grad-CAM –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    model = learn.model.eval()
    
    # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–π —Å–ª–æ–π
    target_layer = dict(model.named_modules())[target_layer_name]
    activations = []
    gradients = []

    # Hook –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    def forward_hook(module, input, output):
        activations.append(output)

    # Hook –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
    def backward_hook(module, grad_in, grad_out):
        gradients.append(grad_out[0])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö—É–∫–∏
    forward_handle = target_layer.register_forward_hook(forward_hook)
    backward_handle = target_layer.register_backward_hook(backward_hook)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    dl = learn.dls.test_dl([image])  # –°–æ–∑–¥–∞—ë–º DataLoader
    for batch in dl:
        image_tensor = batch[0]  # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–Ω–∑–æ—Ä–∞

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
    output = model(image_tensor)
    pred_idx = output.argmax(dim=1).item()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
    model.zero_grad()
    output[0, pred_idx].backward()

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ —É—Å—Ä–µ–¥–Ω—ë–Ω–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
    activations = activations[0].squeeze().detach()
    gradients = gradients[0].squeeze().detach().mean(dim=(1, 2))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –≤–∞–∂–Ω–æ—Å—Ç–∏
    gradcam_map = (activations * gradients.view(-1, 1, 1)).sum(0)
    gradcam_map = torch.clamp(gradcam_map, min=0)
    gradcam_map = gradcam_map / gradcam_map.max()

    # –£–±–∏—Ä–∞–µ–º —Ö—É–∫–∏
    forward_handle.remove()
    backward_handle.remove()

    return gradcam_map.numpy()



def overlay_gradcam(image, gradcam_map):
    """–ù–∞–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã Grad-CAM –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    gradcam_map = cv2.resize(gradcam_map, (image.size[0], image.size[1]))
    gradcam_map = (gradcam_map * 255).astype(np.uint8)
    heatmap = cv2.applyColorMap(gradcam_map, cv2.COLORMAP_JET)
    heatmap = cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)
    overlay = np.array(image) * 0.5 + heatmap * 0.5
    return Image.fromarray(overlay.astype(np.uint8))


# Apply async support
nest_asyncio.apply()

# Load the models
learn_brain = load_learner('brain_model.pkl')
learn_skin = load_learner('eye_model.pkl')

# Language configurations
LANGUAGES = {
    "ru": {
        "start": "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
        "language_set": '–í—ã –≤—ã–±—Ä–∞–ª–∏ - {model_name}',
        "help": "–ö–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        "analyze_result": "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: –ö–ª–∞—Å—Å: {pred}, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prob:.2f}",
        "model_select": "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∏–º–∫–æ–≤ –ú–†–¢ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–∑–≥–∞ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∫–∞. üö®\n\n"
                       "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∏–º–æ–∫, –∏ –±–æ—Ç:\n"
                       "1Ô∏è‚É£ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n"
                       "2Ô∏è‚É£ –ü–æ–∫–∞–∂–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–æ–ª–µ–∑–Ω–∏.\n\n"
                       "üßë‚Äç‚öïÔ∏è –í–∞–∂–Ω–æ: —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É!\n\n"
                       '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–∞–∑–∏—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ @eralyf!\n'
                       '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:',
        "brain_model": "–ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ú–†–¢ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–∑–≥–∞",
        "eye_model": "–ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–ª–∞–∑–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
    },
    "kk": {
        "start": "–°”ô–ª–µ–º! –ñ“±–º—ã—Å —ñ—Å—Ç–µ—É “Ø—à—ñ–Ω —Ç—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        "language_set": '–°—ñ–∑ —Ç–∞“£–¥–∞“ì–∞–Ω –º–æ–¥–µ–ª—å - {model_name}',
        "help": "–ë“±–π—Ä—ã“õ—Ç–∞—Ä:\n/start - –ë–∞—Å—Ç–∞—É\n/help - –ë“±–π—Ä—ã“õ—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ",
        "analyze_result": "–¢–∞–ª–¥–∞—É –Ω”ô—Ç–∏–∂–µ—Å—ñ: –°—ã–Ω—ã–ø: {pred}, —ã“õ—Ç–∏–º–∞–ª–¥—ã“õ: {prob:.2f}",
        "model_select": "ü§ñ “ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! –ë“±–ª –±–æ—Ç –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—Ç—ñ –ø–∞–π–¥–∞–ª–∞–Ω—ã–ø, –±–∞—Å –º–∏—ã–Ω—ã“£ –ú–†–¢ —Å—É—Ä–µ—Ç—Ç–µ—Ä—ñ–Ω —Ç–∞–ª–¥–∞–π–¥—ã –∂”ô–Ω–µ “õ–∞—Ç–µ—Ä–ª—ñ —ñ—Å—ñ–∫—Ç—ñ“£ —ã“õ—Ç–∏–º–∞–ª –±–µ–ª–≥—ñ–ª–µ—Ä—ñ–Ω –∞–Ω—ã“õ—Ç–∞—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–¥—ñ. üö®\n\n"
                       "üì∏ –°—É—Ä–µ—Ç—Ç—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑, –±–æ—Ç:\n"
                       "1Ô∏è‚É£ –°—É—Ä–µ—Ç—Ç—ñ –Ω–µ–π—Ä–æ–Ω–¥—ã“õ –∂–µ–ª—ñ –∞—Ä“õ—ã–ª—ã —Ç–∞–ª–¥–∞–π–¥—ã.\n"
                       "2Ô∏è‚É£ –ê—É—ã—Ä—É“ì–∞ –∫“Ø–¥—ñ–∫ –±–∞—Ä-–∂–æ“ì—ã–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.\n\n"
                       "üßë‚Äç‚öïÔ∏è –ú–∞“£—ã–∑–¥—ã: –±“±–ª “õ“±—Ä–∞–ª —Ç–µ–∫ –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ –º–∞“õ—Å–∞—Ç—Ç–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω. –î”ô–ª –¥–∏–∞–≥–Ω–æ–∑ –∞–ª—É “Ø—à—ñ–Ω –¥”ô—Ä—ñ–≥–µ—Ä–≥–µ –±–∞—Ä—ã“£—ã–∑!\n\n"
                       "–ï–≥–µ—Ä —Å—ñ–∑–¥–µ –µ—Ä–µ–∫—à–µ —Ç—ñ–ª–µ–∫—Ç–µ—Ä –Ω–µ–º–µ—Å–µ —Å–∏–ø–∞—Ç—Ç–∞–º–∞“ì–∞ –µ–Ω–≥—ñ–∑—ñ–ª–µ—Ç—ñ–Ω —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä –±–æ–ª—Å–∞, –º–∞“ì–∞–Ω —Ö–∞–±–∞—Ä–ª–∞“£—ã–∑ @eralyf!"
                       "–ú–æ–¥–µ–ª—å–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        "brain_model": "–ú–†–¢ –±–∞—Å –º–∏—ã –º–æ–¥–µ–ª—ñ–Ω —Ç–∞–ª–¥–∞—É",
        "eye_model": "–ö”©–∑ –∞—É—Ä—É–ª–∞—Ä—ã–Ω —Ç–∞–ª–¥–∞–π—Ç—ã–Ω –º–æ–¥–µ–ª—å",
    },
}

# Store user language and model preferences
user_languages = {}
user_models = {}

# Get language for a user
def get_language(update: Update) -> str:
    user_id = update.effective_user.id
    return user_languages.get(user_id, "ru")

# Get model for a user
def get_model(update: Update) -> str:
    user_id = update.effective_user.id
    return user_models.get(user_id, "brain_model")

# Command /start
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="set_language_ru")],
        [InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞", callback_data="set_language_kk")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(LANGUAGES["ru"]["start"], reply_markup=reply_markup)

# Handler to set language
async def set_language(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "set_language_ru":
        user_languages[query.from_user.id] = "ru"
        lang = "ru"
    elif query.data == "set_language_kk":
        user_languages[query.from_user.id] = "kk"
        lang = "kk"

    keyboard = [
        [InlineKeyboardButton(LANGUAGES[lang]["brain_model"], callback_data="set_model_brain")],
        [InlineKeyboardButton(LANGUAGES[lang]["eye_model"], callback_data="set_model_eye")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=LANGUAGES[lang]["model_select"], reply_markup=reply_markup)

# Handler to set model
async def set_model(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "set_model_brain":
        user_models[query.from_user.id] = "brain_model"
    elif query.data == "set_model_eye":
        user_models[query.from_user.id] = "eye_model"

    lang = get_language(update)

    model_name = LANGUAGES[lang]["brain_model"] if user_models[query.from_user.id] == "brain_model" else LANGUAGES[lang]["eye_model"]
    await query.edit_message_text(text=LANGUAGES[lang]["language_set"].format(model_name=model_name))

# Command /help
async def help_command(update: Update, context: CallbackContext):
    lang = get_language(update)
    await update.message.reply_text(LANGUAGES[lang]["help"])

# Image analysis handler
async def analyze_image(update: Update, context: CallbackContext):
    lang = get_language(update)
    model_choice = get_model(update)

    # Load image
    photo_file = await update.message.photo[-1].get_file()
    file_data = await photo_file.download_as_bytearray()
    image = Image.open(io.BytesIO(file_data)).convert("RGB")

    # Choose model based on user selection
    learn = learn_brain if model_choice == "brain_model" else learn_skin

    # Analyze image
    pred, pred_idx, probs = learn.predict(image)
    gradcam_map = generate_gradcam(learn, image)
    gradcam_image = overlay_gradcam(image, gradcam_map)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Grad-CAM –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    gradcam_buffer = io.BytesIO()
    gradcam_image.save(gradcam_buffer, format="PNG")
    gradcam_buffer.seek(0)

    result = LANGUAGES[lang]["analyze_result"].format(pred=pred, prob=probs[pred_idx])
    await update.message.reply_text(result)

    # Send Grad-CAM image
    await update.message.reply_photo(gradcam_buffer)

# Main bot loop
async def main():
    TOKEN = "7643217203:AAECM5T-AoJ67fEbT3EUtYQe5QNSFID2lmk"
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(set_language, pattern="^set_language_"))
    app.add_handler(CallbackQueryHandler(set_model, pattern="^set_model_"))
    app.add_handler(MessageHandler(filters.PHOTO, analyze_image))

    await app.run_polling()

# Run the bot
await main()
